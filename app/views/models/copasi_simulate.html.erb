<% content_for(:buttons) { button_link_to("Back to #{t('model')}", 'back', model_path(@model,:version=>@display_model.version)) } %>
<%= render :partial => "general/item_title",:locals=>{:item=>@model,:title_postfix=>" - Copasi #{t('model')} Simulation"} %>
<% blob = (File.read(@display_model.content_blobs.first.filepath)).html_safe %>

<script src='https://cdn.plot.ly/plotly-2.27.0.min.js'></script>
<script>
    var copasi = null;
    createCpsModule().then(module => {
        copasi = new COPASI(module);
        console.log(copasi.version);
    });


    $j(document).ready(function () {

        $j('#cps').val(`<%= blob %>`);

    });

    function loadIntoCOPASI()
    {
        var fileContent = `<%= blob %>`;

        // console.log("=================================1===========================");
        // console.log(document.getElementById("cps").value);
        // console.log("================================2============================");
        // console.log(fileContent);
        var info = copasi.loadModel(fileContent);
        document.getElementById("modelName").innerHTML = "none";
        if (info['status'] != "success") {
            alert("Error loading model: " + info['messages']);
            return;
        }
        document.getElementById("modelName").innerHTML = 'Model name: '+ info['model']['name'];
        document.getElementById("copasi_Version").innerHTML = 'Copasi version: '+ copasi.version;
    }


    function simulate() {

        if (copasi == null) {
            return;
        }

        loadIntoCOPASI();
        runSimulation();

    }


    function runSimulation() {

        document.getElementById("data").innerHTML = "";
        document.getElementById("chart").innerHTML = "";

        var result = copasi.simulateYaml(document.getElementById("yaml").value);

        // dump data
        document.getElementById("data").innerHTML = JSON.stringify(result);

        // use highcharts to display data
        var data = [];
        for (var i = 1; i < result.num_variables; i++) {
            data.push({
                name: result.columns[i][0],
                x: result.columns[0],
                y: result.columns[i],
                type: "scatter",
                name: result.titles[i]
            });
        }

        Plotly.newPlot('chart', data);
    }


    function loadUrl() {
        loadUrlFrom(document.getElementById("inputUrl").value);
    };

    function loadUrlFrom(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'text';
        xhr.onload = function () {
            if (xhr.readyState === xhr.DONE) {
                if (xhr.status === 200) {
                    document.getElementById("cps").value = xhr.responseText;
                }
            }
        };
        xhr.send(null);
    };

</script>


<div class="container-fluid">

  <p class="lead">
    <div id="modelName"></div>
    <div id="copasi_Version"></div>
  </p>

  <div>
    <a class="btn btn-sm" data-toggle="collapse" href="#cps_form" role="button" aria-expanded="false"
       aria-controls="cps_form">show cps</a>
    <a class="btn btn-sm" data-toggle="collapse" href="#yaml_form" role="button" aria-expanded="false"
       aria-controls="yaml_form">show yaml</a>
    <div class="form-group collapse show" id="cps_form">
      <label for="cps">CPS Model:</label>
      <textarea id="cps" class="form-control" rows="150"></textarea>
    </div>

    <div class="form-group collapse" id="yaml_form">
      <label for="yaml">Processing: </label>
      <small> Changes for processing in yaml for the problem:
        <pre>{"problem":{"Duration": 100, "StepNumber": 100, "StepSize": 0.1}}</pre> or
        <pre>{"method": {"name": "Stochastic (Gibson + Bruck)"}}</pre> or for changes of
        initialvalues in the form of display names. So:
        <ul>
          <li><pre>[A]_0</pre> for initial concentration of species A</li>
          <li><pre>Values[t].InitialValue</pre> for initial value of parameter t</li>
          <li><pre>(r1).k</pre> for the value of k of reaction r1.</li>
        </ul>
        <pre>{"initial_values": {"[A]_0": 10.0, "Values[t].InitialValue": 0.1, "(r1).k": 0.1}}</pre>
      </small>
      <textarea id="yaml" class="form-control" rows="8">{}</textarea>
    </div>
  </div>

<!--  <a class="btn btn-default" onclick="alert(copasi.version)">Get Version</a>-->
  <%= open_with_copasi_js_button @display_model %>
  <%= open_with_copasi_ui_button @display_model %>


  <div id="chart"></div>
  <div id="data" class="table collapse"></div>
</div>

</div>
