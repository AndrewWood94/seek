<% content_for(:buttons) { button_link_to("Back to #{t('model')}", 'back', model_path(@model,:version=>@display_model.version, :code=>params[:code])) } %>
<%= render :partial => "general/item_title",:locals=>{:item=>@model,:title_postfix=>" - Copasi #{t('model')} Simulation"} %>

<!--https://copasijs.readthedocs.io/en/stable/api.html#javascript-->

<script>
    var copasi = null;
    createCpsModule().then(module => {
        copasi = new COPASI(module);
        console.log(copasi.version);
    });


    $j(document).ready(function () {
        $j('#cps').val(`<%= @blob %>`);
    });

    function loadIntoCOPASI()
    {
        var info = copasi.loadModel(document.getElementById("cps").value);

        document.getElementById("model_name").innerHTML = "none";
        if (info['status'] != "success") {
            document.getElementById("simulation_error").innerHTML = "Error loading model: " + info['messages'];
            document.getElementById('simulation_error').hidden = false;
        }
        document.getElementById("model_name").innerHTML = 'Model name: '+ info['model']['name'];
        document.getElementById("copasi_version").innerHTML = 'Copasi version: '+ copasi.version;
        document.getElementById('simulation_info').hidden = false;
    }


    function simulate() {

        if (copasi == null) {
            alert('There is a problem to load Copasi simulator.');
            return;
        }
        loadIntoCOPASI();
        runSimulation();

    }


    function runSimulation() {

        document.getElementById("data").innerHTML = "";
        document.getElementById("chart").innerHTML = "";

        var result = copasi.simulateYaml(document.getElementById("yaml").value);

        // dump data
        document.getElementById("data").innerHTML = JSON.stringify(result);

        // use highcharts to display data
        var data = [];
        for (var i = 1; i < result.num_variables; i++) {
            data.push({
                name: result.columns[i][0],
                x: result.columns[0],
                y: result.columns[i],
                type: "scatter",
                name: result.titles[i]
            });
        }

        Plotly.newPlot('chart', data);
    }


</script>


<div class="container-fluid">

  <div id="simulation_error" class="alert alert-danger" role="alert" hidden="">

  </div>

  <div id="simulation_info" class="alert alert-info" role="alert" hidden="">
    <div id="model_name"></div>
    <div id="copasi_version"></div>
  </div>

  <div>
    <a class="btn btn-sm" data-toggle="collapse" href="#cps_form" role="button" aria-expanded="false"
       aria-controls="cps_form">show model file</a>
    <a class="btn btn-sm" data-toggle="collapse" href="#yaml_form" role="button" aria-expanded="false"
       aria-controls="yaml_form">show yaml</a>
    <div class="form-group collapse show" id="cps_form">
      <textarea id="cps" class="form-control" rows="150"></textarea>
    </div>

    <div class="form-group collapse" id="yaml_form">
      <label for="yaml">Processing: </label>
      <small> Changes for processing in yaml for the problem:
        <pre>{"problem":{"Duration": 100, "StepNumber": 100, "StepSize": 0.1}}</pre> or
        <pre>{"method": {"name": "Stochastic (Gibson + Bruck)"}}</pre> or for changes of
        initialvalues in the form of display names. So:
        <ul>
          <li><pre>[A]_0</pre> for initial concentration of species A</li>
          <li><pre>Values[t].InitialValue</pre> for initial value of parameter t</li>
          <li><pre>(r1).k</pre> for the value of k of reaction r1.</li>
        </ul>
        <pre>{"initial_values": {"[A]_0": 10.0, "Values[t].InitialValue": 0.1, "(r1).k": 0.1}}</pre>
      </small>
      <textarea id="yaml" class="form-control" rows="8">{}</textarea>
    </div>
  </div>

  <%= open_with_copasi_js_button %>
  <%= open_with_copasi_ui_button %>


  <div id="chart"></div>
  <div id="data" class="table collapse"></div>

</div>

</div>
