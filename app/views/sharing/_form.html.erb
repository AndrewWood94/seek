<%
  object ||= nil
  set_parameters_for_sharing_form object
  @resource.policy.access_type = Seek::Config.default_all_visitors_access_type if @resource.new_record?
%>

<%= folding_panel('Sharing', false, :id => 'sharing_form', :body_options => {:id => 'creator_fold_content'},
                  :help_text => "Here you can specify who can <b>see</b>#{', <b>download</b>' if @resource.is_downloadable?} and <b>edit</b> this #{@resource_type}.") do %>
    <div class="alert alert-info">
      <p>
        Here you can specify who can <b>view</b> the summary of<% if @resource.is_downloadable? %>, <b>get</b> access to the content of,<% end %> and <b>edit</b> the <%= @resource_type -%>.
        <%= link_to_function(("More info " + expand_image).html_safe, visual_effect(:toggle_blind, "more_sharing_info", :duration => 0.3)) -%>
      </p>
    </div>
    <div class="table-responsive">
      <table class="table table-bordered permissions-table" id="permissions-table">
        <thead>
        <tr>
          <th class="name-column"></th>
          <th class="permission-column no-access">No Access</th>
          <th class="permission-column">View</th>
          <th class="permission-column">Download</th>
          <th class="permission-column">Edit</th>
          <th class="permission-column">Manage</th>
          <th class="actions-column"></th>
        </tr>
        </thead>
        <tbody>
        <tr class="permission-row mandatory">
          <td class="name-cell">Public</td>
          <td class="privilege-cell" v-bind:class="getClass(accessType, access_type, true)" v-for="accessType in accessTypes" v-on:click="setPublicAccessType(accessType.value)">
            <input v-if="accessType.value <= maxPublicAccessType" autocomplete="off" type="radio" name="policy[access_type]" v-model="access_type" v-bind:value="accessType.value"/>
          </td>
          <td class="actions-cell"></td>
        </tr>
        <tr class="permission-row" v-for="(permission, index) in permissions">
          <td class="name-cell">
            ({{ permission.contributor_type }}) {{ permission.title }}
            <input type="hidden" v-bind:name="'policy[permissions][' + index +'][contributor_type]'" v-model="permission.contributor_type"/>
            <input type="hidden" v-bind:name="'policy[permissions][' + index +'][contributor_id]'" v-model="permission.contributor_id"/>
          </td>
          <td class="privilege-cell" v-bind:class="getClass(accessType, permission.access_type, false)" v-for="accessType in accessTypes" v-on:click="setAccessType(index, accessType.value)">
            <input autocomplete="off" type="radio" v-bind:name="'policy[permissions][' + index +'][access_type]'" v-model="permission.access_type" v-bind:value="accessType.value"/>
          </td>
          <td class="actions-cell">
            <a v-if="!permission.mandatory" v-on:click="deletePermission(index)" class="btn btn-xs btn-danger remove-permission" title="Remove this permission">
              <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
            </a>
          </td>
        </tr>
        </tbody>
      </table>
    </div>

    <%= render partial: 'sharing/person_permission_modal' %>
    <%= render partial: 'sharing/group_permission_modal' %>
<% end %>

<%= content_tag :script, permissions_json(@resource.policy), type: 'application/json', id: 'permissions-json' %>

<script>
  var permissionsTable = new Vue({
    el: '#permissions-table',
    data: {
      access_type: Sharing.allVisitorsAccessType,
      permissions: [],
      accessTypes: [
        { title: 'No Access', value: Sharing.accessTypes.noAccess, cellClass: 'no-access' },
        { title: 'View', value: Sharing.accessTypes.visible },
        { title: 'Download', value: Sharing.accessTypes.accessible },
        { title: 'Edit', value: Sharing.accessTypes.editing },
        { title: 'Manage', value: Sharing.accessTypes.managing }
      ],
      maxPublicAccessType: Sharing.maxPublicAccessType
    },
    methods: {
      deletePermission: function (index) {
        this.permissions.splice(index, 1);
      },
      setAccessType: function (index, accessType) {
        this.permissions[index].access_type = accessType;
      },
      setPublicAccessType: function (accessType) {
        this.access_type = accessType;
      },
      getClass: function (accessType, permissionAccessType, isPublicSetting) {
        var classes = [];
        if (accessType.value === Sharing.accessTypes.noAccess) {
          classes.push('no-access');
        }

        if ((!isPublicSetting && (accessType.value < this.access_type)) ||
            (isPublicSetting && (accessType.value > this.maxPublicAccessType))) {
          classes.push('disabled');
        } else {
          if (accessType.value === Sharing.accessTypes.noAccess) {
            if (permissionAccessType === accessType.value) {
              classes.push('enabled');
            }
          } else if (accessType.value <= permissionAccessType) {
            classes.push('enabled');
          }
        }

        return classes;
      }
    }
  });

  $j(document).ready(function () {
    var policy = JSON.parse($j('#permissions-json').text());
    permissionsTable.permissions = policy.permissions;
    permissionsTable.access_type = policy.access_type;
  });
</script>
