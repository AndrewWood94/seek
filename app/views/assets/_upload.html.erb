
<%
upload_field = asset_field_prefix
obj=eval("@"+upload_field)

# inject the attributes data_url in the asset type, e.g. @model. This keeps the form clean.
class << obj
attr_accessor :data_url
end unless obj.nil?

asset_name = text_for_resource upload_field
new_version ||= false
original_filename=nil
batch||=false
-%>

<%
   if params[upload_field.to_sym]
     obj.data_url=params[upload_field.to_sym][:data_url] if params[upload_field.to_sym][:data_url]
     original_filename = params[upload_field.to_sym][:original_filename] if params[upload_field.to_sym][:original_filename]
   end
-%>

<div class="box_infotext">

    <p>
        You can register a <%= asset_name -%> by either directly uploading a file, or registering a URL to either another page or remote file. Please test the URL before submitting.
      <%= link_to_function ("More info "+image("expand")).html_safe, :id => 'more_info_expand_image' do |page|
        page.visual_effect(:toggle_appear, "more_upload_info", :duration => 0.3)
        page["more_info_expand_image"].toggle
        page["more_info_collapse_image"].toggle
      end
      -%>
      <%= link_to_function ("More info "+image("collapse")).html_safe, :id => 'more_info_collapse_image', :style => "display:none" do |page|
        page.visual_effect(:toggle_appear, "more_upload_info", :duration => 0.3)
        page["more_info_expand_image"].toggle
        page["more_info_collapse_image"].toggle
      end
      -%>
    </p>
    <span id="more_upload_info" style="display:none;">
        <p>
          When registering a URL to a file, you can specify that a copy of the data should be stored
          within SEEK. This is recommended and is equivalent to uploading a file. It also means that should the data behind the URL become unavailable, the data is still available from SEEK. However, you should
          be sure that the copyright on the file allows you to do this.
        </p>
        <p>
            If the URL results in a redirection or unauthorized response, or if external link is selected,
            then SEEK will store only the URL. In this case, when another user selects to download the <%= asset_name -%>
            then they will simply directed to the URL (for example, so that they can login to access the file).
        </p>
       
    </span>
    <% if new_version -%>
    <p>
      You are about to upload a new version of this <%= asset_name -%>. You should only upload a new version if you have made minor modifications, such as tidying up or fixing errors, that do not change the original purpose
      of the file. If you think this new version changes the original purpose or meaning of the <%= asset_name -%>, then you should <span style="text-decoration: underline"><%= link_to "upload it as a new item",polymorphic_path(obj,:action=>:new) -%></span>
      rather than create a new version.
    </p>
    <% end -%>
</div>

<div>
  <div id="upload_type_selection">
    <ul id="switch_upload_buttons">
      <li style="float:left;height:100%;">
        <%= link_to_function image("file_large"), "from_file_selected(); return (false);", :class => "block_link block_link_active", :id => "upload_from_file_button", :title => tooltip_title_attrib('Add from a local file') -%>

        <%= link_to_function image("internet_large"), "from_url_selected(); return (false);", :class => "block_link", :id => "upload_from_url_button", :title => tooltip_title_attrib('Add from a remote URL') -%>
      </li>
      <li>
        <div id="upload_from_file">
          <b>File to upload:</b>
          <span class="required">*</span>
          <br/>
          <%= file_field_tag "content_blob[data]" -%>
        </div>
        <div id="upload_from_url" style="display:none;">
          <br/>
          <b>URL:</b>
          <span class="required">*</span>
          <%= text_field_tag "content_blob[data_url]",obj.data_url, :size => 55, :id=>"data_url_field" -%>
          <% if batch %>
            <%= link_to_function (image("new") + "Add"), "addToList()" %>
          <% end %>
          <%= link_to image("test", :title => "Test", :alt => "Test")+" Test", "#", :id=>"examine_url" %>
          <br/>
          <div id="test_url_result"></div>
          <div id="copy_option" style="display:none;">
              <b>Upload a copy?</b>
              <%= check_box_tag "content_blob[make_local_copy]" %>
          </div>

          <%= hidden_field_tag "content_blob[original_filename]", original_filename, :id=>:original_filename %>
          <%= hidden_field_tag "url_checked",false %>
        </div>
      </li>
    </ul>
  </div>
  <table id='pending_files'>

  </table>
</div>

<script type="text/javascript">
  <% if batch %>
    var multi_selector = new MultiSelector($j('#pending_files')[0]);

    multi_selector.addElement($j('#content_blob_data')[0]);
    multi_selector.addElement($j('#data_url_field')[0]);

    function addToList() {
        var url = multi_selector.current_url_element.value;
        var error=false;
        var parsed = parseUri(url);

        if (!parsed.protocol || !parsed.host || parsed.host=="null") {
            error=true;
        }
        else {
            var new_element = document.createElement('input');
            new_element.type = 'text';
            var old_element = document.getElementsByName('content_blob[url_' + (multi_selector.id_url - 1) + ']')[0];
            new_element.size = old_element.size
            var original_filename_element = document.createElement('input');
            original_filename_element.type = 'hidden';
            original_filename_element.name = 'content_blob[original_filename_' + (multi_selector.id_url) + ']';

            $('upload_from_url').appendChild(original_filename_element);
            if (old_element.value != "") {
                old_element.parentNode.insertBefore(new_element, old_element);
                old_element.multi_selector.addElement(new_element);
                old_element.multi_selector.addListRow(old_element);
                old_element.type = 'hidden';
            } else {
                old_element.focus();
            }

        }

        if (error) {
            alert("An invalid URL was provided");
        }
    }

    function listFilesOfPreviousVersion(){
        <% content_blobs = obj.latest_version.try(:content_blobs) %>
        <% unless content_blobs.blank? %>
        <% content_blobs.each do |cb| %>
        var element = document.createElement('input');
        element.name = "content_blobs[id][<%= cb.id%>]";
        element.value = "<%= (cb.original_filename || cb.url) + " (original)" %>";
        element.type = 'hidden';
        var current_element = multi_selector.current_element;
        current_element.parentNode.insertBefore(element, current_element);
        multi_selector.addListRow(element);
        <% end %>
        <% end %>
    }

    <% end %>


  setup_url_field("<%= examine_url_content_blobs_path %>","examine_url");

  <% if obj.data_url.blank? -%>
    from_file_selected();
  <% else -%>
    from_url_selected();
  <% end -%>

</script>
