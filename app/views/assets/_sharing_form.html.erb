<%
  object ||= nil
  set_parameters_for_sharing_form object
  @resource.policy.access_type ||= Seek::Config.default_all_visitors_access_type
%>

<%= folding_panel('Sharing', false, :id => 'sharing_form', :body_options => {:id => 'creator_fold_content'},
                  :help_text => "Here you can specify who can <b>see</b>#{', <b>download</b>' if @resource.is_downloadable?} and <b>edit</b> this #{@resource_type}.") do %>
    <div class="alert alert-info">
      <p>
        Here you can specify who can <b>view</b> the summary of<% if @resource.is_downloadable? %>, <b>get</b> access to the content of,<% end %> and <b>edit</b> the <%= @resource_type -%>.
        <%= link_to_function(("More info " + expand_image).html_safe, visual_effect(:toggle_blind, "more_sharing_info", :duration => 0.3)) -%>
      </p>
    </div>
    <div class="table-responsive">
      <table class="table table-bordered permissions-table">
        <thead>
        <tr>
          <th class="name-column"></th>
          <th class="permission-column no-access">No Access</th>
          <th class="permission-column">View</th>
          <th class="permission-column">Download</th>
          <th class="permission-column">Edit</th>
          <th class="permission-column">Manage</th>
        </tr>
        </thead>
        <tbody>
        <tr class="permission-row">
          <td>Everyone</td>
          <td class="privilege-cell no-access">
            <%= radio_button_tag('policy[access_type]', Policy::NO_ACCESS, (@resource.policy.access_type == Policy::NO_ACCESS), autocomplete: 'off') %>
          </td>
          <% [Policy::VISIBLE, Policy::ACCESSIBLE, Policy::EDITING, Policy::MANAGING].each do |privilege| %>
              <td class="privilege-cell">
                <%= radio_button_tag('policy[access_type]', privilege, (@resource.policy.access_type == privilege), autocomplete: 'off') %>
              </td>
          <% end %>
        </tr>
        </tbody>
      </table>
    </div>
<% end %>

<%= content_tag :script, permissions_json(@resource.policy), type: 'application/json', id: 'permissions-json' %>

<script>
  var Policy = {
    renderPermissions: function () {
      var permissions = JSON.parse($j('#permissions-json').text());
      permissions.forEach(function (permission) {
        var row = HandlebarsTemplates['sharing/permission_row']({ permission: permission, accessTypes: Policy.accessTypes });
        $j('.permissions-table').append(row);
      });
    },

    // Display tick icons in all the privileges up to and including the selected one.
    // e.g. clicking on "Edit" should show ticks in the "View" and "Download" cells
    highlightPrivileges: function () {
      $j('.permissions-table .permission-row').each(function () {
        $j('td', $j(this)).removeClass('enabled');
        var cell = $j('input[type=radio]:checked', $j(this)).parent('.privilege-cell');
        var otherCells = cell.prevAll('.privilege-cell').andSelf();
        if (!cell.hasClass('no-access')) {
          otherCells = otherCells.not('.no-access');
        }
        otherCells.addClass('enabled');
      });
    },

    // Show that the user cannot apply privileges than what is set for "Everyone"
    setMinimumPrivileges: function () {
      $j('.privilege-cell').removeClass('disabled');
      var index = $j('[name="policy[access_type]"]').index($j('[name="policy[access_type]"]:checked'));
      $j('.permission-row:gt(0)').each(function () {
        $j('.privilege-cell:lt(' + index + ')', $j(this)).removeClass('enabled').addClass('disabled');
      });
    }
  };

  $j(document).ready(function () {
    Policy.renderPermissions();
    Policy.highlightPrivileges();
    Policy.setMinimumPrivileges();
  });

  $j('.permissions-table').on('click', '.privilege-cell', function () {
    if (!$j(this).hasClass('disabled')) {
      $j('input[type=radio]', $j(this)).prop('checked', true);
      Policy.highlightPrivileges();
      Policy.setMinimumPrivileges();
    }
  });

  $j('.permissions-table').on('change', '.permission-row input[type=radio]', function () {
    Policy.highlightPrivileges();
    Policy.setMinimumPrivileges();
  });

  Policy.accessTypes = {
    noAccess: <%= Policy::NO_ACCESS -%>,
    visible: <%= Policy::VISIBLE -%>,
    accessible: <%= Policy::ACCESSIBLE -%>,
    editing: <%= Policy::EDITING -%>,
    managing: <%= Policy::MANAGING -%>
  }
</script>
