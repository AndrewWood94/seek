<% environment.context_class.instance_eval { include ImagesHelper } %>

$j(document).ready(function () {
    $j('[data-role="seek-git-jstree-container"]').each(function () {
        var container = $j(this);
        var element = $j('[data-role="seek-git-jstree"]', container);
        var json = JSON.parse($j('script[data-role="seek-git-jstree-data"]', container).html());

        element.on('loaded.jstree', function(e, data) {
            var annotationMap = {};
            if ($j('script[data-role="seek-git-jstree-annotation-data"]', container).length) {
                annotationMap = JSON.parse($j('script[data-role="seek-git-jstree-annotation-data"]', container).html());
            }
            if (annotationMap) {
                for (var path of Object.keys(annotationMap)) {
                    var node = $j(this).jstree(true).get_node(path, true);
                    if (node) {
                        var annotations = annotationMap[path];
                        if (annotations.length) {
                            node.addClass('git-annotated');
                            for (var annotation of annotations) {
                                var template = HandlebarsTemplates["git/annotations/" + annotation.key] ||
                                    HandlebarsTemplates["git/annotations/default"];
                                node.append(template(annotation));
                            }
                        }
                    }
                }
            }
        }).jstree({
            'plugins': ['wholerow', 'checkbox', 'types', 'conditionalselect'],
            'checkbox': {
                'three_state': false
            },
            'types' : {
                'root': {
                    'icon': '<%= asset_path(icon_filename_for_key('git_repository')) %>',
                    'a_attr': { 'class': 'git-jstree-root' }
                },
                'tree' : {
                    'icon': '<%= asset_path(icon_filename_for_key('organise')) %>',
                    'a_attr': { 'class': 'git-jstree-tree' }
                },
                'blob': {
                    'icon': '<%= asset_path(icon_filename_for_key('markup')) %>',
                    'a_attr': { 'class': 'git-jstree-blob' }
                }
            },
            'conditionalselect' : function (node, event) {
                if (element.hasClass('allow-tree-select') && node.type === 'tree') {
                    return true;
                }
                if (element.hasClass('allow-blob-select') && node.type === 'blob') {
                    return true;
                }
                if (element.hasClass('allow-root-select') && node.type === 'root') {
                    return true;
                }

                return false;
            },
            'core': {
                'check_callback': true,
                'force_text': true,
                'multiple': false,
                'dblclick_toggle': true,
                'data': json
            }
        });
    });

    $j('[data-role="seek-git-browser-modal-btn"]').click(function () {
        var modal = $j(this).parents('.modal');
        var input = modal.data('targetInput');
        var jstree = $j('.jstree', modal).jstree(true);
        input.val(jstree.get_selected());
        modal.modal('hide');

        return false;
    });

    $j('[data-role="seek-git-path-input"]').each(function () {
        var input = $j(this);
        var modal = $j(input.data('modal'));
        var jstreeElement = $j('.jstree', modal);
        var selectTrees = input.data('select-trees') || false;
        var selectBlobs = input.data('select-blobs') || false;
        var selectRoot = input.data('select-root') || false;
        input.click(function () {
            jstreeElement.toggleClass('allow-tree-select', selectTrees);
            jstreeElement.toggleClass('allow-blob-select', selectBlobs);
            jstreeElement.toggleClass('allow-root-select', selectRoot);

            jstreeElement.jstree(true).close_all();
            jstreeElement.jstree(true).uncheck_all();

            if (input.val()) {
                jstreeElement.jstree(true).select_node(input.val());
            }

            modal.modal();
            modal.modal('show');
            modal.data('targetInput', input);

            return false;
        });

        input.blur(function () {
            modal.modal('hide');
            modal.data('targetInput', null);

            return true;
        });
    });
});
