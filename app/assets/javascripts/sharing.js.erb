var Sharing = {
  addPermission: function (permission) {
    // Update if already existing, otherwise add a new row
    for (var i = 0; i < permissionsTable.permissions.length; i++) {
      var p = permissionsTable.permissions[i];
      if (p.contributor_type == permission.contributor_type && p.contributor_id == permission.contributor_id) {
        permissionsTable.permissions.splice(i, 1, permission);
        return false;
      }
    }

    permissionsTable.permissions.push(permission);
  },

  // Add a permission when a new project is associated with the resource via the dropdown menu
  addPermissionForProject: function (projectId, element) {
    if (projectId > 0) {
      Sharing.addPermission({
        contributor_type: 'Project',
        contributor_id: projectId,
        title: $j(':selected', $j(element)).text(),
        access_type: Sharing.associatedProjectAccessType,
        mandatory: true });
    }
  },

  requestInstitutionsUrl: '<%= Rails.application.routes.url_helpers.request_institutions_projects_path %>',
  requestAllInstitutionsUrl: '<%= Rails.application.routes.url_helpers.request_all_institutions_path %>',

  accessTypes: {
    noAccess: <%= Policy::NO_ACCESS %>,
    visible: <%= Policy::VISIBLE %>,
    accessible: <%= Policy::ACCESSIBLE %>,
    editing: <%= Policy::EDITING %>,
    managing: <%= Policy::MANAGING %>
  },

  associatedProjectAccessType: <%= Seek::Config.default_associated_projects_access_type %>,
  allVisitorsAccessType: <%= Seek::Config.default_all_visitors_access_type %>,
  maxPublicAccessType: <%= Policy.max_public_access_type %>
};

Vue.component('permissions-table', {
  props: ['publicPermission', 'permissions'],
  template:
  '<table class="permissions-table" id="permissions-table">' +
  '<thead>' +
  '<tr>' +
  '<th class="name-column"></th>' +
  '<th class="permission-column" v-for="accessType in accessTypes" :class="accessType.classes">{{ accessType.title }}</th>' +
  '<th class="actions-column"></th>' +
  '</tr>' +
  '</thead>' +
  '<tbody>' +
  '<tr is="permission-row" :permission="publicPermission" :access-types="accessTypes" :public-access-type="publicPermission.access_type" field-prefix-orig="policy"></tr>' +
  '<tr is="permission-row" v-for="(permission, index) in sortedPermissions" :index="index" :permission="permission" :access-types="accessTypes" :public-access-type="publicPermission.access_type" v-on:delete-permission="deletePermission(index)"></tr>' +
  '</tbody>'+
  '</table>',
  data: function () {
    return {
      accessTypes: [
        { title: 'No Access', value: Sharing.accessTypes.noAccess, classes: 'no-access' },
        { title: 'View', value: Sharing.accessTypes.visible },
        { title: 'Download', value: Sharing.accessTypes.accessible },
        { title: 'Edit', value: Sharing.accessTypes.editing },
        { title: 'Manage', value: Sharing.accessTypes.managing }
      ]
    };
  },
  computed: {
    sortedPermissions: function () {
      return this.permissions.sort(function (a, b) {
        return (b.mandatory || false) - (a.mandatory || false);
      });
    }
  },
  methods: {
    deletePermission: function (index) {
      this.permissions.splice(index, 1);
    }
  }
});

Vue.component('permission-row', {
  props: ['index', 'permission', 'accessTypes', 'publicAccessType', 'fieldPrefixOrig'],
  template:
  '<tr class="permission-row" :class="{ mandatory: permission.mandatory }">' +
  '<td class="name-cell"><span v-if="permission.contributor_type">({{ permission.contributor_type }}) </span>{{ permission.title }}' +
  '<input v-if="permission.contributor_type" type="hidden" :name="fieldPrefix+\'[contributor_type]\'" v-model="permission.contributor_type"/>' +
  '<input v-if="permission.contributor_id" type="hidden" :name="fieldPrefix+\'[contributor_id]\'" v-model="permission.contributor_id"/>' +
  '</td>' +
  '<td is="privilege-cell" v-for="accessType in accessTypes" :fieldPrefix="fieldPrefix" :permission="permission" :access-type="accessType" :public-access-type="publicAccessType"></td>' +
  '<td class="actions-cell">'+
  '<a v-if="!permission.mandatory" @click="$emit(\'delete-permission\')" class="btn btn-xs btn-danger" title="Remove this permission">' +
  '<span class="glyphicon glyphicon-trash" aria-hidden="true"></span>' +
  '</a>' +
  '</td>' +
  '</tr>',
  computed: {
    fieldPrefix: function () {
      return (this.fieldPrefixOrig ? this.fieldPrefixOrig : 'policy[permissions][' + this.index + ']');
    }
  }
});

Vue.component('privilege-cell', {
  props: ['fieldPrefix', 'permission', 'accessType', 'publicAccessType'],
  template:
  '<td class="privilege-cell" :class="classes" @click="if (!disabled) permission.access_type = accessType.value">' +
  '<input v-if="!disabled" autocomplete="off" type="radio" :name="fieldPrefix+\'[access_type]\'" v-model="permission.access_type" :value="accessType.value"/>' +
  '</td>',
  computed: {
    disabled: function () {
      return (this.permission.public ? (this.accessType.value > Sharing.maxPublicAccessType) : (this.accessType.value < this.publicAccessType));
    },
    enabled: function () {
      return this.permission.access_type === this.accessType.value ||
          (this.accessType.value !== Sharing.accessTypes.noAccess && this.permission.access_type > this.accessType.value);
    },
    classes: function () {
      return { 'enabled': !this.disabled && this.enabled,
        'disabled': this.disabled,
        'no-access': this.accessType.value === Sharing.accessTypes.noAccess };
    }
  }
});
