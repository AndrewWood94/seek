class SampleType < ActiveRecord::Base
  include SysMODB::SpreadsheetExtractor

  attr_accessible :title, :uuid, :sample_attributes_attributes

  acts_as_uniquely_identifiable

  has_many :samples

  has_many :sample_attributes, order: :pos, inverse_of: :sample_type

  belongs_to :content_blob
  alias :template :content_blob

  validates :title, presence: true
  validate :one_title_attribute_present

  accepts_nested_attributes_for :sample_attributes, allow_destroy: true

  def validate_value?(attribute_name, value)
    attribute = sample_attributes.detect { |attr| attr.title == attribute_name }
    fail UnknownAttributeException.new("Unknown attribute #{attribute_name}") if attribute.nil?
    attribute.validate_value?(value)
  end

  def build_from_template
    return unless compatible_template_file?
    sheet = find_sample_sheet
    raise 'no sheet' unless sheet
    raise 'no string attribute type' if string_attribute_type.nil?
    find_sample_column_names(sheet)
  end

  private

  def find_sample_column_names(sheet)
    cells = sheet.find("//ss:sheet/ss:rows/ss:row[@index=1]/ss:cell")
    cells.each do |column_cell|
      unless (heading = column_cell.content).blank?
        is_title=sample_attributes.empty?
        sample_attributes << SampleAttribute.new(title:heading,sample_attribute_type:string_attribute_type,is_title:is_title,required:is_title)
      end
    end
  end

  #FIXME:somewhat hacky - this is the default for the autogenerated
  def string_attribute_type
    SampleAttributeType.where(title:'String').first
  end

  def find_sample_sheet
    doc=template_xml_document
    doc.find("//ss:sheet[@name='Samples']").last
  end

  def compatible_template_file?
    template && template.is_extractable_spreadsheet?
  end

  def template_xml
    @template_xml ||= spreadsheet_to_xml(open(template.filepath))
  end

  def template_xml_document
    unless @template_doc
      @template_doc = LibXML::XML::Parser.string(template_xml).parse
      @template_doc.root.namespaces.default_prefix="ss"
    end
    @template_doc
  end

  def one_title_attribute_present
    unless (count = sample_attributes.select(&:is_title).count) == 1
      errors.add(:sample_attributes, "There must be 1 attribute which is the title, currently there are #{count}")
    end
  end

  class UnknownAttributeException < Exception; end
end
